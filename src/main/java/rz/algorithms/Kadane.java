package rz.algorithms;


import org.junit.Assert;
import org.junit.Test;

/*
 * Write a function that finds an returns the greatest sum out of a contiguous
 * row of values.
 */

public class Kadane {

    public static int findmax(int[] array) {
        int sum = 0;
        if (array == null || array.length == 0) return sum;
        int maxSoFar = sum;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
            if (sum < 0) sum = 0;
            if (maxSoFar < sum) maxSoFar = sum;
        }
        return maxSoFar;
    }

    @Test
    public void findGreatestSum10() {
        Assert.assertEquals(10, Kadane.findmax(new int[]{-1, 1, 2, 3, 4, -20, 5}));
    }

    @Test
    public void findGreatestSum20() {
        Assert.assertEquals(20, Kadane.findmax(new int[]{-1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2, 3, 4, -20, 5,
                -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1,
                2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5,
                -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2,
                3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1,
                1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3,
                2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5,
                -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2,
                3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1,
                1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3,
                2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5,
                -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2,
                3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1,
                1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3,
                2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5,
                -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1, 1, 2,
                3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4,
                -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000, -1000, 1, 2, 3, 4, 10, -20, 5, -1,
                1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3,
                4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1, 1, 2, 3, 4, -20, 5, -1000, -1000}));
    }


    @Test
    public void findGreatestSum0() {
        Assert.assertEquals(0, Kadane.findmax(new int[]{-1, -1, -2, -3, -4, -20, -5}));
    }

    @Test
    public void findGreatestSumOfAnEmptyList() {
        Assert.assertEquals(0, Kadane.findmax(new int[0]));
    }

    @Test
    public void findGreatestSumOfANull() {
        Assert.assertEquals(0, Kadane.findmax(null));
    }
}
